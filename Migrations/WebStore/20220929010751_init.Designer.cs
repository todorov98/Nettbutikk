// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nettbutikk.Data;

namespace Nettbutikk.Migrations
{
    [DbContext(typeof(WebStoreContext))]
    [Migration("20220929010751_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Nettbutikk.Models.CancelOrderConfirmation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderCancelled")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("CancelOrderConfirmations");
                });

            modelBuilder.Entity("Nettbutikk.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Nettbutikk.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateFulfilled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePlaced")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Stage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Nettbutikk.Models.OrderReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Nettbutikk.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3471cbfc-7956-4c2c-829b-ca9908a31eb3"),
                            Category = "Football",
                            Count = 9,
                            Currency = "EUR",
                            Description = "A high quality football manufactured for the UEFA Champions Leage Final 2022/2023 season.",
                            Name = "UEFA Champions Leage 22/23 Final Original Edition",
                            Price = 102.98999999999999
                        },
                        new
                        {
                            Id = new Guid("de5f9448-4b8c-499c-83fc-84f2fa64ee45"),
                            Category = "DrinkingBottle",
                            Count = 8,
                            Currency = "EUR",
                            Description = "High quality drinking bottlefrom Puma.",
                            Name = "Puma X2 Bottle",
                            Price = 22.989999999999998
                        },
                        new
                        {
                            Id = new Guid("16ef8e29-71a1-46fa-901a-bfe12d0ad789"),
                            Category = "Sweater",
                            Count = 7,
                            Currency = "EUR",
                            Description = "A highquality breathable sweater produced by Nike. Works well for most physical activity.",
                            Name = "Nike Sweater XZ21 Breather Edition",
                            Price = 45.990000000000002
                        },
                        new
                        {
                            Id = new Guid("792eb163-ef07-4019-82e1-65c4e431f24c"),
                            Category = "FootballBoots",
                            Count = 7,
                            Currency = "EUR",
                            Description = "High quality football boots from Nike with modern ACC control that provides great control and first touch during all weatherconditions.",
                            Name = "Nike Hypervenom Phantom ACC",
                            Price = 249.49000000000001
                        },
                        new
                        {
                            Id = new Guid("287f9ac8-c918-43f2-9b37-6f84027381bf"),
                            Category = "Bag",
                            Count = 7,
                            Currency = "EUR",
                            Description = "Completely new and solid bag fromPuma.",
                            Name = "Puma T23 Bag",
                            Price = 75.390000000000001
                        },
                        new
                        {
                            Id = new Guid("28b6eb5e-9197-4d09-a63a-a11b757a0628"),
                            Category = "MountainBoots",
                            Count = 8,
                            Currency = "EUR",
                            Description = "High quality mountain boots from Goretex. Provides great comfort and warmth even during the harshest conditions.",
                            Name = "Goretex Z34 Climber Boots",
                            Price = 167.59
                        },
                        new
                        {
                            Id = new Guid("5ba308de-6ec3-433b-9539-97cceade2138"),
                            Category = "SportsPants",
                            Count = 11,
                            Currency = "EUR",
                            Description = "Nice and comfortable sports pants by Adidas.",
                            Name = "Adidas F99 Pants Long",
                            Price = 34.990000000000002
                        });
                });

            modelBuilder.Entity("Nettbutikk.Models.ProductOrderRelation", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrderRelation");
                });

            modelBuilder.Entity("Nettbutikk.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoggedIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LoggedOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Nettbutikk.Models.CancelOrderConfirmation", b =>
                {
                    b.HasOne("Nettbutikk.Models.Order", "Order")
                        .WithMany("CancelOrderConfirmations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Nettbutikk.Models.Order", b =>
                {
                    b.HasOne("Nettbutikk.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Nettbutikk.Models.OrderReceipt", b =>
                {
                    b.HasOne("Nettbutikk.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Nettbutikk.Models.ProductOrderRelation", b =>
                {
                    b.HasOne("Nettbutikk.Models.Order", "Order")
                        .WithMany("ProductOrderRelations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nettbutikk.Models.Product", "Product")
                        .WithMany("ProductOrderRelations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Nettbutikk.Models.Session", b =>
                {
                    b.HasOne("Nettbutikk.Models.Customer", "Customer")
                        .WithMany("Sessions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Nettbutikk.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Nettbutikk.Models.Order", b =>
                {
                    b.Navigation("CancelOrderConfirmations");

                    b.Navigation("ProductOrderRelations");
                });

            modelBuilder.Entity("Nettbutikk.Models.Product", b =>
                {
                    b.Navigation("ProductOrderRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
